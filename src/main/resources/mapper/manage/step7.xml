<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.scyllacore.dumpWeb.commonModule.db.mapper.manage.Step7ForSubmitterOrderRegistrationMapper">

    <insert id="insertDriveReport" parameterType="DriveReportDTO">
        INSERT INTO drive_report_tb
        (CAR_NO,
        REG_DATE,
        SRC_SUBMIT,
        SRC_SUBMIT_TEL,
        CONTACT_PERSON,
        PAYMENT_CHK,
        CUR_STATUS,
        DRIVER_ID_IDX,
        MANAGER_ID_IDX,
        WRITER_ID_IDX_FK)
        VALUES (#{carNo},
        #{regDate},
        #{srcSubmit},
        #{srcSubmitTel},
        #{contactPerson},
        #{paymentChk},
        #{curStatus},
        (select USER_ID_IDX from user_info_tb where USER_ID = #{CarNo}),
        #{managerIdIdx},
        #{writerIdIdxFk})

        <selectKey order="AFTER" keyProperty="reportId,driverIdIdx" resultType="DriveReportDTO">
            select REPORT_ID, DRIVER_ID_IDX
            from drive_report_tb
            where REPORT_ID = (select MAX(REPORT_ID) from drive_report_tb)
        </selectKey>
    </insert>

    <insert id="insertDriveReportSub" parameterType="DriveReportDTO">
        INSERT INTO drive_report_tb
        (REPORT_ID_FK,
         FROM_SITE,
         TO_SITE,
         ITEM,
         QUANTITY,
         UNIT_PRICE,
         DRIVER_ID_IDX,
         MANAGER_ID_IDX,
         WRITER_ID_IDX_FK)
        VALUES (#{reportId},
                #{fromSite},
                #{toSite},
                #{item},
                #{unitPrice},
                #{quantity},
                #{driverIdIdx},
                #{managerIdIdx},
                #{writerIdIdxFk})
    </insert>


    <update id="updateDriveReport" parameterType="DriveReportDTO">
        UPDATE mileage_tb
        SET FROM_SITE = #{driveDate},
        ITEM = #{item},
        LAST_KM = #{lastKm},
        USED_AMOUNT = #{usedAmount},
        USED_OIL = #{usedOil},
        MEMO = #{memo},
        PAYMENT_CHK = #{paymentChk},

        REPL_ACTIVE_CHK = #{replActiveChk},
        REPL_KM = #{replKm},
        <if test="replDate != ''">
            REPL_DATE = #{replDate},
        </if>
        REPL_CHK = #{replChk}
        WHERE WRITER_ID_IDX_FK = #{writerIdIdxFk}
        AND MILEAGE_ID = #{mileageId}
    </update>


    <select id="selectMileageList" resultType="MileageDTO">
        SELECT MILEAGE_ID,
               DATE_FORMAT(DRIVE_DATE, '%Y-%m-%d') AS driveDate,
               ITEM,
               PAYMENT_CHK,
               LAST_KM,
               USED_AMOUNT,
               USED_OIL,
               MEMO,
               REPL_ACTIVE_CHK,
               DATE_FORMAT(REPL_DATE, '%Y-%m-%d')  AS replDate,
               REPL_KM,
               REPL_CHK
        FROM mileage_tb
        WHERE WRITER_ID_IDX_FK = #{writerIdIdxFk}
          AND DRIVE_DATE LIKE CONCAT(#{driveDate}, '%')
        ORDER BY DRIVE_DATE ASC
    </select>


    <delete id="deleteMileage">
        DELETE
        FROM mileage_tb
        WHERE WRITER_ID_IDX_FK = #{writerIdIdxFk}
          AND MILEAGE_ID = #{mileageId}
    </delete>


    <select id="selectMileage" resultType="MileageDTO">
        SELECT MILEAGE_ID,
               DATE_FORMAT(DRIVE_DATE, '%Y-%m-%d') AS driveDate,
               ITEM,
               PAYMENT_CHK,
               LAST_KM,
               USED_AMOUNT,
               USED_OIL,
               MEMO,
               REPL_ACTIVE_CHK,
               DATE_FORMAT(REPL_DATE, '%Y-%m-%d')  AS replDate,
               REPL_KM,
               REPL_CHK
        FROM mileage_tb
        WHERE WRITER_ID_IDX_FK = #{writerIdIdxFk}
          AND MILEAGE_ID = #{mileageId}
    </select>

</mapper>